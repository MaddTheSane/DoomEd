// doombsp.h

// REDOOMED changes (c) 2019 Josh Freeman, distributed under GNU AGPL (v3 or later approved vers.)

#ifdef REDOOMED
#   import <Cocoa/Cocoa.h>
#else // Original
#   import <appkit/appkit.h>
#endif

#import <math.h>
#import "cmdlib.h"
#import "Wadfile.h"
#include "DoomData.h"

#define	SHORT(x)	CFSwapInt16LittleToHost((short)x)
#define	LONG(x)		CFSwapInt32LittleToHost((int)x)

#define PI	3.141592657
@class Storage;

#ifdef REDOOMED
#   define MAXINT   INT_MAX
#   define MININT   INT_MIN
#endif

/*
===============================================================================

							map file types

===============================================================================
*/

typedef struct
{
	int			floorheight, ceilingheight;
	char 		floorflat[9], ceilingflat[9];
	int			lightlevel;
	int			special, tag;	
} sectordef_t;

typedef struct
{
	int			firstrow;	
	int			firstcollumn;
	char		toptexture[9];
	char		bottomtexture[9];
	char		midtexture[9];
	sectordef_t	sectordef;			// on the viewer's side
	int			sector;				// only used when saving doom map
} worldside_t;

typedef struct
{
	NXPoint		p1, p2;
	int			special, tag;
	int			flags;	
	worldside_t	side[2];
} worldline_t;

#define	ML_BLOCKMOVE	1
#define	ML_TWOSIDED		4	// backside will not be present at all if not two sided

typedef struct
{
	NXPoint		origin;
	int			angle;
	int			type;
	int			options;
	int			area;
} worldthing_t;

/*
===============================================================================

							internal types

===============================================================================
*/

typedef	struct
{
	NXPoint	pt;
	float	dx,dy;
}divline_t;

typedef struct bspstruct_s
{
	id						lines_i;		// if non NULL, the node is
	divline_t				divline;		// terminal and has no children
	float					bbox[4];
	struct	bspstruct_s		*side[2];
} bspnode_t;


typedef struct
{
	NXPoint		p1, p2;
	int			linedef, side, offset;
	boolean		grouped;				// internal error check
} line_t;


/*
===============================================================================

								doombsp

===============================================================================
*/

extern	Wadfile		*wad_i;
extern	boolean		draw;


/*
===============================================================================

								doomload

===============================================================================
*/

extern Storage *linestore_i, *thingstore_i;

void LoadDoomMap (char *mapname);


/*
===============================================================================

								drawing

===============================================================================
*/

extern	NSWindow *window_i;
extern	NSView *view_i;
extern	float	scale;
extern	NXRect		worldbounds;

void EraseWindow (void);
void DrawMap (void);
void DrawLineStore (id lines_i);
void DrawDivLine (divline_t *div);
void DrawLineDef (maplinedef_t *ld);


/*
===============================================================================

								buildbsp

===============================================================================
*/

extern	int		cuts;			// number of new lines generated by BSP process
extern	bspnode_t	*startnode;

void BuildBSP (void);
void DivlineFromWorldline (divline_t *d, line_t *w);
int	PointOnSide (NXPoint *p, divline_t *l);



/*
===============================================================================

							savebsp

===============================================================================
*/

extern	Storage	*secstore_i;
extern	Storage	*mapvertexstore_i;
extern	Storage	*subsecstore_i;
extern	Storage	*maplinestore_i;
extern	Storage	*nodestore_i;
extern	Storage	*mapthingstore_i;
extern	Storage	*ldefstore_i;
extern	Storage	*sdefstore_i;

void SaveDoomMap (void);

/*
===============================================================================

							saveblocks

===============================================================================
*/

void SaveBlocks (void);

/*
===============================================================================

							savesectors

===============================================================================
*/

void ProcessSectors (void);
void BuildSectordefs (void);

/*
===============================================================================

							saveconnect

===============================================================================
*/

void ProcessConnections (void);
void OutputConnections (void);

